package script.packet.disassembler

import xlitekt.game.packet.KeyPressedPacket
import xlitekt.game.packet.disassembler.onPacketDisassembler
import xlitekt.shared.buffer.readByteSubtract
import xlitekt.shared.buffer.readUMedium

/**
 * @author Justin Kenney
 */
private val codes = intArrayOf(
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    85,
    80,
    84,
    -1,
    91,
    -1,
    -1,
    -1,
    81,
    82,
    86,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    13,
    -1,
    -1,
    -1,
    -1,
    83,
    104,
    105,
    103,
    102,
    96,
    98,
    97,
    99,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    25,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    48,
    68,
    66,
    50,
    34,
    51,
    52,
    53,
    39,
    54,
    55,
    56,
    70,
    69,
    40,
    41,
    32,
    35,
    49,
    36,
    38,
    67,
    33,
    65,
    37,
    64,
    -1,
    -1,
    -1,
    -1,
    -1,
    228,
    231,
    227,
    233,
    224,
    219,
    225,
    230,
    226,
    232,
    89,
    87,
    -1,
    88,
    229,
    90,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    -1,
    -1,
    -1,
    101,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    100,
    -1,
    87,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1
)
//        var c = -1
//        if (keycode in 1..12) c = Integer.parseInt("7${Integer.toHexString(keycode - 1)}", 16)
//        else if (keycode in 16..24) c = keycode + 33
//        else if (keycode == 25) c = 48
//
//        val text = if (c >= 0) KeyEvent.getKeyText(c) else ""

onPacketDisassembler(opcode = 97, size = -2) {
    var lastTime: Long = 0
    var keycodes = ArrayList<Int>()

    repeat(remaining.toInt() / 4) {
        readUMedium().let { if (it != 0) lastTime = it.toLong() }
        keycodes.add(readByteSubtract())
    }

    KeyPressedPacket(
        time = lastTime,
        keycodes = keycodes.toTypedArray()
    )
}
